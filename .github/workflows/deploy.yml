name: Deploy Antelope Contracts

on:
  push:
    branches:
      - '**'  # Run on all branches
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to (must exist in network_config.json)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.network || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          
      - name: Build Docker image
        run: |
          # Build the development environment
          docker build -t bespangle-dev-env -f Dockerfile .
      
      - name: Determine target network
        id: network
        run: |
          # For manual triggers, use the input parameter; for push events, use the branch name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            NETWORK="${{ github.event.inputs.network }}"
          else
            # Extract branch name from ref (e.g., refs/heads/automate-deployment -> automate-deployment)
            NETWORK="${GITHUB_REF#refs/heads/}"
          fi
          
          # Verify network exists in network_config.json
          if ! jq -e ".networks.\"$NETWORK\"" network_config.json > /dev/null; then
            echo "ERROR: No configuration found for network: $NETWORK" >&2
            echo "Available networks: $(jq -r '.networks | keys | join(", ")' network_config.json)" >&2
            exit 1
          fi
          
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "Deploying to network: $NETWORK"
      
      - name: Verify network configuration
        run: |
          NETWORK=${{ steps.network.outputs.network }}
          echo "Verifying configuration for network: $NETWORK"
          
          # Check if account configuration exists
          if ! jq -e ".networks.\"$NETWORK\".accounts" network_config.json > /dev/null; then
            echo "ERROR: No accounts configured for network: $NETWORK" >&2
            exit 1
          fi
          
          echo "Network configuration verified successfully"
      
      - name: Deploy Contracts
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        run: |
          # Enable debug output
          set -x
          
          # Make scripts executable
          chmod +x ./deploy.sh
          chmod +x ./docker-run.sh
          
          # Set GitHub workspace variables
          export GITHUB_WORKSPACE=$(pwd)
          
          # Run the deployment in Docker with proper environment variables
          if ! docker run --rm \
            -e BESPANGLE_IN_DOCKER=true \
            -e GITHUB_WORKSPACE=/github/workspace \
            -e NETWORK="${{ steps.network.outputs.network }}" \
            -e DEPLOYER_PRIVATE_KEY="${{ secrets.DEPLOYER_PRIVATE_KEY }}" \
            -v "$GITHUB_WORKSPACE:/github/workspace" \
            -w /github/workspace \
            bespangle-dev-env \
            ./deploy.sh --network "${{ steps.network.outputs.network }}" --action both; then
            echo "❌ Deployment failed"
            exit 1
          fi
          
          # If we get here, the deployment was successful
          echo "✅ Successfully deployed to ${{ steps.network.outputs.network }} network"
