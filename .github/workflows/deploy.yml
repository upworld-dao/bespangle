name: Deploy Antelope Contracts

on:
  push:
    branches:
      - '**'  # Run on all branches
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to (must exist in network_config.json)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.network || github.ref_name }}
    # This ensures the job will fail if the environment doesn't exist
    # and properly loads the environment's secrets
    permissions:
      contents: read
      deployments: write
      id-token: write  # Needed for GitHub OIDC
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          
      - name: Build Docker image
        run: |
          # Build the development environment
          docker build -t bespangle-dev-env -f Dockerfile .
          
      - name: Verify GitHub environment
        id: verify_env
        env:
          GITHUB_TOKEN: ${{ github.token }}  # Use github.token instead of secrets.GITHUB_TOKEN
        run: |
          # Get the environment name from either workflow_dispatch input or branch name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV_NAME="${{ github.event.inputs.network }}"
          else
            ENV_NAME="${GITHUB_REF#refs/heads/}"
          fi
          
          echo "Verifying GitHub environment '$ENV_NAME' exists..."
          
          # Debug: Show the token being used (masked in logs)
          echo "Using GitHub token: ${GITHUB_TOKEN:0:4}...${GITHUB_TOKEN: -4}"
          
          # Use GitHub API to check if environment exists
          RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/environments")
            
          # Debug: Show the raw response if needed
          # echo "API Response: $RESPONSE"
          
          if ! echo "$RESPONSE" | jq -e ".environments[] | select(.name == \"$ENV_NAME\")" > /dev/null; then
            echo "ERROR: No GitHub environment found for: $ENV_NAME" >&2
            echo "Available environments:" >&2
            if [ -n "$RESPONSE" ]; then
              echo "$RESPONSE" | jq -r '.environments[].name' | sed 's/^/  - /' >&2
            else
              echo "  (No environments found or error fetching environments)" >&2
            fi
            echo "\nTo fix this, create a GitHub environment named '$ENV_NAME' in the repository settings." >&2
            echo "Repository: $GITHUB_REPOSITORY" >&2
            exit 1
          fi
          
          echo "✓ Verified GitHub environment: $ENV_NAME"
      
      - name: Determine target network
        id: network
        run: |
          # Get the branch name (remove refs/heads/ prefix if present)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          NETWORK="$BRANCH_NAME"
          
          # Verify the network exists in the config
          if ! jq -e ".networks.\"$NETWORK\"" network_config.json > /dev/null; then
            echo "ERROR: No configuration found for network: $NETWORK" >&2
            echo "Available networks: $(jq -r '.networks | keys | join(", ")' network_config.json)" >&2
            echo "\nTo deploy to this branch, add a '$NETWORK' configuration to network_config.json" >&2
            exit 1
          fi
          
          # Verify the GitHub environment exists
          echo "Verifying GitHub environment '$NETWORK' exists..."
          if ! gh api "/repos/$GITHUB_REPOSITORY/environments/$NETWORK" --jq .name 2>/dev/null; then
            echo "ERROR: No GitHub environment found for network: $NETWORK" >&2
            echo "Available environments: $(gh api "/repos/$GITHUB_REPOSITORY/environments" --jq '.environments[].name' | tr '\n' ' ')" >&2
            echo "\nTo fix this, create a GitHub environment named '$NETWORK' and configure its deployment protection rules and secrets." >&2
            exit 1
          fi
          
          echo "Using network: $NETWORK"
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "Deploying to network: $NETWORK"
      
      - name: Verify network configuration
        run: |
          NETWORK=${{ steps.network.outputs.network }}
          echo "Verifying configuration for network: $NETWORK"
          
          # Check if account configuration exists
          if ! jq -e ".networks.\"$NETWORK\".accounts" network_config.json > /dev/null; then
            echo "ERROR: No accounts configured for network: $NETWORK" >&2
            exit 1
          fi
          
          echo "Network configuration verified successfully"
      
      - name: Deploy Contracts
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        run: |
          # Enable debug output
          set -x
          
          # Make scripts executable
          chmod +x ./deploy.sh
          chmod +x ./docker-run.sh
          
          # Set GitHub workspace variables
          export GITHUB_WORKSPACE=$(pwd)
          
          # Get the network from the previous step
          NETWORK="${{ steps.network.outputs.network }}"
          
          # Run the deployment in Docker with proper environment variables
          if ! docker run --rm \
            -e BESPANGLE_IN_DOCKER=true \
            -e GITHUB_WORKSPACE=/github/workspace \
            -e NETWORK="$NETWORK" \
            -e DEPLOYER_PRIVATE_KEY="${{ secrets.DEPLOYER_PRIVATE_KEY }}" \
            -v "$GITHUB_WORKSPACE:/github/workspace" \
            -w /github/workspace \
            bespangle-dev-env \
            ./deploy.sh --network "$NETWORK" --action both; then
            echo "❌ Deployment failed"
            exit 1
          fi
          
          # If we get here, the deployment was successful
          echo "✅ Successfully deployed to ${{ steps.network.outputs.network }} network"
