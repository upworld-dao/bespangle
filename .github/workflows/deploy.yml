name: Deploy Antelope Contracts

on:
  push:
    branches:
      - '**'  # Run on all branches
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to (must exist in network_config.json)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.network || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Antelope CDT
        run: |
          wget https://github.com/AntelopeIO/cdt/releases/download/v4.1.0/cdt_4.1.0-1_amd64.deb
          sudo apt install ./cdt_4.1.0-1_amd64.deb
      
      - name: Setup cleos
        run: |
          wget https://github.com/AntelopeIO/leap/releases/download/v5.0.3/leap_5.0.3_amd64.deb
          sudo apt install ./leap_5.0.3_amd64.deb
      
      - name: Determine target network
        id: network
        run: |
          # For manual triggers, use the input parameter; for push events, use the branch name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            NETWORK="${{ github.event.inputs.network }}"
          else
            # Extract branch name from ref (e.g., refs/heads/automate-deployment -> automate-deployment)
            NETWORK="${GITHUB_REF#refs/heads/}"
          fi
          
          # Verify network exists in network_config.json
          if ! jq -e ".networks.\"$NETWORK\"" network_config.json > /dev/null; then
            echo "ERROR: No configuration found for network: $NETWORK" >&2
            echo "Available networks: $(jq -r '.networks | keys | join(", ")' network_config.json)" >&2
            exit 1
          fi
          
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "Deploying to network: $NETWORK"
      
      - name: Verify network configuration
        run: |
          NETWORK=${{ steps.network.outputs.network }}
          echo "Verifying configuration for network: $NETWORK"
          
          # Check if account configuration exists
          if ! jq -e ".networks.\"$NETWORK\".accounts" network_config.json > /dev/null; then
            echo "ERROR: No accounts configured for network: $NETWORK" >&2
            exit 1
          fi
          
          echo "Network configuration verified successfully"
      
      - name: Deploy Contracts
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        run: |
          # Enable debug output
          set -x
          
          # Make scripts executable
          chmod +x ./deploy.sh
          chmod +x ./docker-run.sh
          set -x
          
          # Set network from previous step
          NETWORK="${{ steps.network.outputs.network }}"
          
          # Create wallet directory and set permissions
          mkdir -p ~/eosio-wallet
          chmod 700 ~/eosio-wallet
          
          # Start keosd in the background
          echo "Starting keosd..."
          keosd --http-server-address=127.0.0.1:8900 > keosd.log 2>&1 &
          KESOD_PID=$!
          
          # Give keosd time to start
          echo "Waiting for keosd to start..."
          sleep 5
          
          # Function to clean up keosd process
          cleanup() {
            echo "=== keosd log ==="
            cat keosd.log
            echo "================="
            echo "Cleaning up..."
            kill $KESOD_PID 2>/dev/null || true
          }
          
          # Ensure keosd is cleaned up on exit
          trap cleanup EXIT
          
          # Check if keosd is running
          if ! ps -p $KESOD_PID > /dev/null; then
            echo "ERROR: Failed to start keosd"
            exit 1
          fi
          
          # Always create a fresh wallet to avoid state issues
          echo "Setting up wallet..."
          
          # Remove any existing wallet
          cleos wallet stop 2>/dev/null || true
          rm -f ~/eosio-wallet/*.wallet
          rm -f ~/eosio-wallet/*.wallet.lock
          
          # Create a new wallet
          echo "Creating new wallet..."
          WALLET_CREATE_OUTPUT=$(cleos wallet create --to-console 2>&1)
          echo "Wallet create output: $WALLET_CREATE_OUTPUT"
          
          # Extract password from the output (format: "PW5...")
          WALLET_PASSWORD=$(echo "$WALLET_CREATE_OUTPUT" | grep -o 'PW5[^\"]*' | head -1)
          
          if [ -z "$WALLET_PASSWORD" ]; then
            # Try alternative format if the first attempt fails
            WALLET_PASSWORD=$(echo "$WALLET_CREATE_OUTPUT" | grep -o '"PW5[^\"]*"' | tr -d '"')
          fi
          
          if [ -z "$WALLET_PASSWORD" ]; then
            echo "ERROR: Failed to extract wallet password"
            echo "Wallet create output was: $WALLET_CREATE_OUTPUT"
            exit 1
          fi
          
          echo "Extracted wallet password: ${WALLET_PASSWORD:0:5}..."  # Only show first 5 chars for security
          
          # Save the password for future use in this session
          echo "$WALLET_PASSWORD" > ~/wallet_password.txt
          chmod 600 ~/wallet_password.txt
          
          # Verify wallet is unlocked
          if ! cleos wallet list | grep -q '"default\*"'; then
            echo "Unlocking wallet..."
            if ! cleos wallet unlock --password "$WALLET_PASSWORD"; then
              echo "ERROR: Failed to unlock wallet"
              exit 1
            fi
          fi
          
          # Import the private key if provided
          if [ -n "$DEPLOYER_PRIVATE_KEY" ]; then
            echo "Importing private key..."
            if ! echo "$DEPLOYER_PRIVATE_KEY" | cleos wallet import --private-key; then
              echo "WARNING: Failed to import private key (it might already be imported)"
            fi
            
            # List keys to verify import
            echo "Wallet keys:"
            cleos wallet keys
          else
            echo "WARNING: No DEPLOYER_PRIVATE_KEY provided, wallet is empty"
          fi
          
          echo "Wallet is ready"
          
          # Run deployment for the target network
          echo "Starting deployment to $NETWORK..."
          if ! ./deploy.sh --network "$NETWORK" --action both; then
            echo "❌ Deployment failed"
            exit 1
          fi
          
          # If we get here, the deployment was successful
          echo "✅ Successfully deployed to $NETWORK network"
